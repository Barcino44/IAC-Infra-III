#!/bin/bash -xe
DB_ENDPOINT=$1

yum update -y

sudo yum update -y
sudo amazon-linux-extras enable nginx1
sudo yum install -y nginx

# Instalar paquetes necesarios
rpm --import https://yum.corretto.aws/corretto.key
curl -Lo /etc/yum.repos.d/corretto.repo https://yum.corretto.aws/corretto.repo
yum install -y java-21-amazon-corretto-devel

# Verificar Java
java -version

# Crear usuario para la aplicación
useradd -m -s /bin/bash appuser || true

# Crear directorios para backend, frontend y logs
mkdir -p /opt/app/{backend,frontend}
mkdir -p /var/log/app

# ==================== DESPLEGAR BACKEND ====================
echo "Desplegando backend Spring Boot..."
cd /opt/app/backend

# Clonar repositorio backend (si no existe)
if [ ! -d ".git" ]; then
  git clone https://github.com/Barcino44/Backend-Infra-III.git .
else
  git pull
fi

# Compilar aplicación
chmod +x mvnw
./mvnw clean package -DskipTests

# Copiar jar generado
cp target/*.jar app.jar

# Crear archivo application.properties (ajusta las variables de entorno necesarias)
cat > application.properties << EOF
server.port=8080
server.servlet.context-path=/api

spring.datasource.url=jdbc:mysql://${DB_ENDPOINT}:3306/aplicaciondb
spring.datasource.username=admin
spring.datasource.password=password
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect

spring.web.cors.allowed-origins=*
spring.web.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
spring.web.cors.allowed-headers=*

logging.level.com.tu-paquete=INFO
logging.file.name=/var/log/app/backend.log

spring.profiles.active=production
EOF

# Cambiar propietario a appuser
chown -R appuser:appuser /opt/app/backend
chown -R appuser:appuser /var/log/app

# Crear servicio systemd para Spring Boot
cat > /etc/systemd/system/springboot-app.service << 'EOF'
[Unit]
Description=Spring Boot Application
After=network.target

[Service]

Type=simple
User=appuser
Group=appuser
WorkingDirectory=/opt/app/backend
ExecStart=/usr/bin/java -jar -Dspring.config.location=file:./application.properties app.jar
Restart=always
RestartSec=10
StandardOutput=append:/var/log/app/backend.log
StandardError=append:/var/log/app/backend-error.log
Environment=JAVA_HOME=/usr/lib/jvm/java-21-amazon-corretto

[Install]
WantedBy=multi-user.target
EOF

# Recargar systemd, habilitar e iniciar servicio backend
systemctl daemon-reload
systemctl enable springboot-app
systemctl start springboot-app

# ==================== DESPLEGAR FRONTEND ====================
echo "Desplegando frontend HTML/CSS/JS..."
cd /opt/app/frontend

# Clonar repositorio frontend si no existe
if [ ! -d ".git" ]; then
  git clone https://github.com/Barcino44/Frontend-Infra-III.git .
else
  git pull
fi

# Crear estructura básica frontend si no existe
mkdir -p {css,js,images,assets,fonts}

# ==================== CONFIGURAR NGINX ====================
echo "Configurando Nginx..."

# Eliminar configuración por defecto
rm -f /etc/nginx/sites-enabled/default
rm -f /etc/nginx/conf.d/default.conf

cat > /etc/nginx/conf.d/app.conf << 'EOF'
server {
    listen 80 default_server;
    server_name _;

    root /var/www/frontend;
    index index.html index.htm;

    # Redirección desde raíz
    location = / {
        return 302 /Login/login.html;
    }

    # Servir archivos estáticos del frontend
    location / {
        try_files $uri $uri/ /index.html;

        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Content-Type-Options "nosniff" always;
    }

    # Cache para recursos estáticos
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
    }

    # Proxy para API (backend Spring Boot)
    location /api/ {
        proxy_pass http://localhost:8080/api/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        
        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }
    access_log /var/log/nginx/frontend_access.log;
    error_log /var/log/nginx/frontend_error.log;
}
EOF

# Remover configuración por defecto si existe
rm -f /etc/nginx/nginx.conf.default

# ==================== COPIAR FRONTEND ====================
echo "Copiando archivos del frontend..."

mkdir -p /var/www/frontend
cp -r /opt/app/frontend/* /var/www/frontend/

# Actualizar URLs en archivos JS para no usar localhost
find /var/www/frontend -name "*.js" -type f -exec sed -i 's|http://localhost:8080|/api|g' {} \;
find /var/www/frontend -name "*.js" -type f -exec sed -i 's|localhost:8080|/api|g' {} \;

# Crear config.js
cat > /var/www/frontend/js/config.js << 'EOF'
const API_CONFIG = {
  baseURL: '/api',
  endpoints: {
      login: '/client/login',
      register: '/client/register',
      products: '/client/getProducts'
  }
};
EOF

# Ajustar permisos para nginx
chown -R nginx:nginx /var/www/frontend
chmod -R 755 /var/www/frontend

# ==================== INICIAR SERVICIOS ====================
echo "Iniciando servicios..."

nginx -t

systemctl enable nginx
systemctl start nginx

systemctl status springboot-app
systemctl status nginx
