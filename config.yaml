AWSTemplateFormatVersion: '2010-09-09'
Description: Arquitectura completa según diagrama con VPC, subredes, EC2, RDS, CloudWatch y otros servicios

Parameters:
  EnvironmentName:
    Description: Nombre del entorno para esta infraestructura
    Type: String
    Default: Produccion

  #Configuración VPC con su rango de direcciones IP
  VpcCIDR:
    Description: CIDR para la VPC
    Type: String
    Default: 10.0.0.0/16

  #Configuración de variables
  PublicSubnet1CIDR:
    Description: CIDR para la subred pública 1
    Type: String
    Default: 10.0.1.0/24 

  PrivateSubnet1CIDR:
    Description: CIDR para la subred privada 1 (aplicación)
    Type: String
    Default: 10.0.2.0/24

  PrivateSubnet2CIDR:
    Description: CIDR para la subred privada 2 (base de datos)
    Type: String
    Default: 10.0.3.0/24

  PrivateSubnet3CIDR:
    Description: CIDR para la subred privada 3 (en otra AZ)
    Type: String
    Default: 10.0.4.0/24

  PublicSubnet2CIDR:
    Description: CIDR para la subred pública 2
    Type: String
    Default: 10.0.5.0/24 
  
  #Instancia base de datos
  DBInstanceType:
    Description: Tipo de instancia RDS
    Type: String
    Default: db.t3.micro

  #Instancias del Autoscaling group
  EC2InstanceType:
    Description: Tipo de instancia EC2
    Type: String
    Default: t2.medium

  AutoScalingMinSize:
    Description: Número mínimo de instancias EC2
    Type: Number
    Default: 2

  AutoScalingMaxSize:
    Description: Número máximo de instancias EC2
    Type: Number
    Default: 6

  DBName:
    Description: Nombre de la base de datos
    Type: String
    Default: aplicaciondb

  DBEngine:
    Description: Motor de base de datos
    Type: String
    Default: mysql
    AllowedValues:
      - mysql
      - postgres

  DBUsername:
    Description: Usuario de la base de datos
    Type: String
    Default: admin
    NoEcho: true

  DBPassword:
    Description: Contraseña de la base de datos
    Type: String
    Default: password
    NoEcho: true

  #KeyPair para el acceso al bsation host e instancias del autoscaling group
  KeyPairName:
    Description: Nombre de la key pair existente para acceder al Bastion Host
    Type: String
    Default: vockey

Resources:
  # VPC y subredes
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-VPC

  #Internet Gateway para el acceso de instancias publicas a internet
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-IGW
          
  #Asociación del IGW con la VPC
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  #Definición de cada subnet con su información ya prestablecida

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PublicSubnet2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PrivateSubnet1-App

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PrivateSubnet2-DB

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      CidrBlock: !Ref PrivateSubnet3CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PrivateSubnet3

  # Configuración de enrutamiento
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PublicRoutes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  #Acceso a internet por parte de las subnets privadas
  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-NatGateway

  NatGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PrivateRoutes

  DefaultPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2

  # Grupos de seguridad del Bastion
  # Permito ssh desde cualquier ip
  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for Bastion Host
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-BastionSG

  #Politicas de acceso para LAS instancias del webserver
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Grupo de seguridad para servidores web EC2
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref BastionSecurityGroup  # Solo permite SSH desde el bastion

  #Politicas de acceso para el ALB
  ApplicationLoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Grupo de seguridad para el Application Load Balancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  #Politicas de acceso para la base de datos
  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Grupo de seguridad para RDS
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref WebServerSecurityGroup
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref WebServerSecurityGroup

  # Application Load Balancer, permito http2 para (nignx)
  # Necesito de 2 subnets en zonas de disponibilidad diferentes (obligatorio)
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${EnvironmentName}-ALB
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ApplicationLoadBalancerSG
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: 60
        - Key: routing.http2.enabled
          Value: true
  #Listener del ALB. Escucha puerto 80, donde corre la app web (nginx)
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
  #Target group, del ALB
  #Las instancias se encuentran en la vpc ya definida
  #Se realiza el chequeo de la app en /Login/login.html -> Pagina del login de la app
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /Login/login.html
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: !Sub ${EnvironmentName}-TargetGroup
      Port: 80
      Protocol: HTTP
      TargetType: instance
      VpcId: !Ref VPC

# Auto Scaling Group
# Todas las instancias creadas sigan esta plantilla que contiene el front y el back de la app web.
  WebServerLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${EnvironmentName}-WebServerLaunchTemplate
      VersionDescription: Initial version
      LaunchTemplateData:
        ImageId: ami-003adf48aeccd847e #Deep Learning Base Neuron AMI (Amazon Linux 2) 20230703
        InstanceType: !Ref EC2InstanceType
        KeyName: !Ref KeyPairName
        SecurityGroupIds:
          - !Ref WebServerSecurityGroup
        UserData:
          Fn::Base64: !Sub | 
            #!/bin/bash -xe
            exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
            set -x
            #Instalación de nginx
            yum update -y
            amazon-linux-extras enable nginx1
            amazon-linux-extras install -y nginx1

            #Instalación de java 21
            rpm --import https://yum.corretto.aws/corretto.key
            curl -Lo /etc/yum.repos.d/corretto.repo https://yum.corretto.aws/corretto.repo
            yum install -y java-21-amazon-corretto-devel

            # Verificar Java
            java -version

            # Crear usuario para la aplicación
            useradd -m -s /bin/bash appuser || true

            # Crear directorios para backend, frontend y logs
            mkdir -p /opt/app/{backend,frontend}
            mkdir -p /var/log/app

            # ==================== DESPLEGAR BACKEND ====================

            cd /opt/app/backend

            # Clonar repositorio backend (si no existe)
            if [ ! -d ".git" ]; then
              git clone https://github.com/Barcino44/Backend-Infra-III.git .
            else
              git pull
            fi

            # Compilar aplicación
            chmod +x mvnw
            ./mvnw clean package -DskipTests

            # Copiar jar generado
            cp target/*.jar app.jar

            # Crear archivo application.properties (ajusta las variables de entorno necesarias)
            cat > application.properties << EOF
            
            #Springboot escucha el puerto 8080

            server.port=8080
            server.servlet.context-path=/api
            
            #Referencia a la base de datos de aws

            spring.datasource.url=jdbc:mysql://${RDSDatabase.Endpoint.Address}:3306/aplicaciondb
            spring.datasource.username=admin
            spring.datasource.password=password
            spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
            spring.jpa.hibernate.ddl-auto=update
            spring.jpa.show-sql=false
            spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect

            #Endpoints permitidos
            spring.web.cors.allowed-origins=*
            spring.web.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
            spring.web.cors.allowed-headers=*

            logging.level.com.tu-paquete=INFO
            logging.file.name=/var/log/app/backend.log
            spring.profiles.active=production
            EOF

            chown -R appuser:appuser /opt/app/backend
            chown -R appuser:appuser /var/log/app

            # Crear servicio systemd para Spring Boot

            cat > /etc/systemd/system/springboot-app.service << 'EOF'
            [Unit]
            Description=Spring Boot Application
            After=network.target

            [Service]

            Type=simple
            User=appuser
            Group=appuser
            WorkingDirectory=/opt/app/backend
            ExecStart=/usr/bin/java -jar -Dspring.config.location=file:./application.properties app.jar
            Restart=always
            RestartSec=10
            StandardOutput=append:/var/log/app/backend.log
            StandardError=append:/var/log/app/backend-error.log
            Environment=JAVA_HOME=/usr/lib/jvm/java-21-amazon-corretto

            [Install]
            WantedBy=multi-user.target
            EOF

            # Recargar systemd, habilitar e iniciar servicio backend
            systemctl daemon-reload
            systemctl enable springboot-app
            systemctl start springboot-app

            # ==================== DESPLEGAR FRONTEND ====================

            echo "Desplegando frontend HTML/CSS/JS..."
            cd /opt/app/frontend

            # Clonar repositorio frontend si no existe
            if [ ! -d ".git" ]; then
              git clone https://github.com/Barcino44/Frontend-Infra-III.git .
            else
              git pull
            fi

            # Crear estructura básica frontend si no existe
            mkdir -p {css,js,images,assets,fonts}

            # ==================== CONFIGURAR NGINX ====================

            # Eliminar configuración por defecto
            rm -f /etc/nginx/sites-enabled/default
            rm -f /etc/nginx/conf.d/default.conf

            cat > /etc/nginx/conf.d/app.conf << 'EOF'
            server {
                listen 80 default_server;
                server_name _;

                root /var/www/frontend;
                index index.html index.htm;

                #El healthcheck se realiza con esta ruta
                location = / {
                    return 302 /Login/login.html;
                }

                # Servir archivos estáticos del frontend
                location / {
                    try_files $uri $uri/ /index.html;

                    add_header X-Frame-Options "SAMEORIGIN" always;
                    add_header X-XSS-Protection "1; mode=block" always;
                    add_header X-Content-Type-Options "nosniff" always;
                }

                # Cache para recursos estáticos
                location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
                    expires 1y;
                    add_header Cache-Control "public, immutable";
                }

                # Proxy para API (backend Spring Boot)
                location /api/ {
                    proxy_pass http://localhost:8080/api/;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection 'upgrade';
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                    proxy_cache_bypass $http_upgrade;
                    
                    # Timeouts
                    proxy_connect_timeout 60s;
                    proxy_send_timeout 60s;
                    proxy_read_timeout 60s;
                }
                access_log /var/log/nginx/frontend_access.log;
                error_log /var/log/nginx/frontend_error.log;
            }
            EOF

            # Remover configuración por defecto si existe
            rm -f /etc/nginx/nginx.conf.default

            # ==================== COPIAR FRONTEND ====================
            echo "Copiando archivos del frontend..."

            mkdir -p /var/www/frontend
            cp -r /opt/app/frontend/* /var/www/frontend/

            # Actualizar URLs en archivos JS para no usar localhost
            find /var/www/frontend -name "*.js" -type f -exec sed -i 's|http://localhost:8080|/api|g' {} \;
            find /var/www/frontend -name "*.js" -type f -exec sed -i 's|localhost:8080|/api|g' {} \;

            # Tipos de endpoints actualmente en el back
            cat > /var/www/frontend/js/config.js << 'EOF'
            const API_CONFIG = {
              baseURL: '/api',
              endpoints: {
                login: '/client/login',
                register: '/client/register',
                products: '/client/getProducts',
                addToCart: '/shoppingCart/addItem/client/{{clientId}}/product/{{productId}}/quantity/{{quantity}}',
                itemsToCart: '/shoppingCart/getItems/clientId/{{clientId}}',
                deleteItemFromCart: '/shoppingCart/deleteItem/item/{{itemId}}/client/{{clientId}}',
                buyItemsFromCart: '/shoppingCart/checkout/client/{{clientId}}' 
              }
            };
            EOF
            # Ajustar permisos para nginx
            chown -R nginx:nginx /var/www/frontend
            chmod -R 755 /var/www/frontend

            # ==================== INICIAR SERVICIOS ====================
            echo "Iniciando servicios..."

            systemctl enable nginx
            systemctl start nginx
            systemctl status springboot-app
            systemctl status nginx

#Creación del autoscaling group usando la plantilla previamente definida
  WebServerAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub ${EnvironmentName}-ASG
      MinSize: !Ref AutoScalingMinSize
      MaxSize: !Ref AutoScalingMaxSize
      DesiredCapacity: !Ref AutoScalingMinSize
      LaunchTemplate:
        LaunchTemplateId: !Ref WebServerLaunchTemplate
        Version: !GetAtt WebServerLaunchTemplate.LatestVersionNumber
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
      TargetGroupARNs:
        - !Ref ALBTargetGroup
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-WebServer
          PropagateAtLaunch: true

  # Políticas de escalado del Autoscaling group
  WebServerScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref WebServerAutoScalingGroup
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 50 #Escalare si el uso promedio de CPI es mayor a 50%.

  # Base de datos RDS
  # Se crea la base de datos y asocia a dos 2 subredes en A-Z distintas (obligatorio)
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Grupo de subredes para RDS
      SubnetIds:
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3

  #Creación de la base de datos con diferentes características (Ya definidas)
  RDSDatabase:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 20
      DBInstanceClass: !Ref DBInstanceType
      Engine: !Ref DBEngine
      MultiAZ: false
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      DBName: !Ref DBName
      VPCSecurityGroups:
        - !Ref DBSecurityGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
      StorageType: gp2
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Database
  #Bastion Host
  #Resulta clave para conectarse a las instancias mediante ssh,
  #A traves de un tunnel, se puede acceder a ellas y estresarlas para probar las alarmas
  #Y el autoscaling group
  BastionHost:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.micro
      ImageId: ami-003542581452a9bf8 #amzn2-ami-minimal-selinux-enforcing-hvm-2.0.20240109.0-x86_64-gp2
      SubnetId: !Ref PublicSubnet1
      SecurityGroupIds:
        - !Ref BastionSecurityGroup
      KeyName: !Ref KeyPairName
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-BastionHost
      UserData: !Base64
        Fn::Sub: |
          #!/bin/bash -xe
          yum update -y

  # CloudWatch monitoring
  # Envio una alarma en caso de que el uso promedio de cpu de las instancias
  # del autoscaling group es mayor a 50% 
  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Alarm cuando el CPU excede 50%
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 60
      EvaluationPeriods: 1
      Threshold: 50
      AlarmActions:
        - !Ref NotificationTopic
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref WebServerAutoScalingGroup
      ComparisonOperator: GreaterThanThreshold
      
  # Instancias healthy 
  #Envio alarmas si: Existe una instancia unhealthy, envio correo 
  #Si la instancia pasa de unhealthy a healthy, envio un correo diciendo esto
  TargetGroupUnhealthyHosts:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: !Sub "ALARMA CRÍTICA: Instancias NO SALUDABLES en ${EnvironmentName}"
      AlarmName: !Sub ${EnvironmentName}-UnhealthyInstances
      MetricName: UnHealthyHostCount
      Namespace: AWS/ApplicationELB
      Statistic: Maximum
      Period: 60  # Cada minuto se hacen verificaciones para verificar y enviar respectivos correos.
      EvaluationPeriods: 1
      Threshold: 0
      AlarmActions:
        - !Ref NotificationTopic
      OKActions: 
        - !Ref NotificationTopic
      Dimensions:
        - Name: TargetGroup
          Value: !GetAtt ALBTargetGroup.TargetGroupFullName
        - Name: LoadBalancer
          Value: !GetAtt ApplicationLoadBalancer.LoadBalancerFullName
      ComparisonOperator: GreaterThanThreshold

  # SNS Topic para notificaciones.
  # Defino un topico para enviar notificaciones de alarma por correo.
  NotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub ${EnvironmentName}-AlertNotifications
      TopicName: !Sub ${EnvironmentName}-AlertNotifications

  #Me suscribo a este topico para recibir notificaciones.
  NotificationTopicSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: email
      Endpoint: juanjobargracia@gmail.com
      TopicArn: !Ref NotificationTopic

  # CloudTrail para registro de actividad
  # Se crea un bucket para almacenar los logs de la cuenta y llevar registro de actividad.
  CloudTrailBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: !Sub "cloud-trail-bucket-${AWS::AccountId}-${AWS::Region}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  #Quiero que los diferentes logs de la actividad de la cuenta actual, los almacenes en mi bucket
  #Por eso se realiza la politica.  
  CloudTrailBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref CloudTrailBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AWSCloudTrailAclCheck
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: s3:GetBucketAcl
            Resource: !GetAtt CloudTrailBucket.Arn

          - Sid: AWSCloudTrailWrite
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: s3:PutObject
            Resource: !Sub "${CloudTrailBucket.Arn}/AWSLogs/${AWS::AccountId}/*"
            Condition:
              StringEquals:
                "s3:x-amz-acl": "bucket-owner-full-control"

#Espero a que se creen el bucket y sus politicas para asociarlo posteriormente con cloudtrail
  MyCloudTrail:  
    Type: AWS::CloudTrail::Trail
    DependsOn: CloudTrailBucketPolicy
    Properties:
      TrailName: Produccion-ActivityTrail
      S3BucketName: !Ref CloudTrailBucket
      IsLogging: true
      IncludeGlobalServiceEvents: true
      EnableLogFileValidation: true

  ApplicationDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub "${EnvironmentName}-Application-Dashboard"
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/EC2", "CPUUtilization", "AutoScalingGroupName", "${WebServerAutoScalingGroup}" ],
                  [ ".", "NetworkIn", ".", "." ],
                  [ ".", "NetworkOut", ".", "." ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "EC2 Auto Scaling Group - Métricas Principales",
                "period": 300,
                "stat": "Average"
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/ApplicationELB", "RequestCount", "LoadBalancer", "${ApplicationLoadBalancer.LoadBalancerFullName}" ],
                  [ ".", "TargetResponseTime", ".", "." ],
                  [ ".", "HTTPCode_Target_2XX_Count", ".", "." ],
                  [ ".", "HTTPCode_Target_4XX_Count", ".", "." ],
                  [ ".", "HTTPCode_Target_5XX_Count", ".", "." ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Application Load Balancer - Métricas",
                "period": 300,
                "stat": "Sum"
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/RDS", "CPUUtilization", "DBInstanceIdentifier", "${RDSDatabase}" ],
                  [ ".", "DatabaseConnections", ".", "." ],
                  [ ".", "FreeableMemory", ".", "." ],
                  [ ".", "FreeStorageSpace", ".", "." ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "RDS Database - Métricas de Rendimiento",
                "period": 300,
                "stat": "Average"
              }
            },
            {
              "type": "metric",
              "x": 8,
              "y": 12,
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/RDS", "ReadLatency", "DBInstanceIdentifier", "${RDSDatabase}" ],
                  [ ".", "WriteLatency", ".", "." ],
                  [ ".", "ReadIOPS", ".", "." ],
                  [ ".", "WriteIOPS", ".", "." ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "RDS Database - Latencia y IOPS",
                "period": 300,
                "stat": "Average"
              }
            }
          ]
        }
Outputs:
  VPC:
    Description: ID de la VPC
    Value: !Ref VPC
    Export:
      Name: !Sub ${EnvironmentName}-VPCID

  PublicSubnet:
    Description: ID de la subred pública
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub ${EnvironmentName}-PublicSubnet

  PrivateSubnet1:
    Description: ID de la subred privada para aplicación
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub ${EnvironmentName}-PrivateSubnet1

  PrivateSubnet2:
    Description: ID de la subred privada para base de datos
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub ${EnvironmentName}-PrivateSubnet2

  WebServerSecurityGroup:
    Description: ID del grupo de seguridad para servidores web
    Value: !Ref WebServerSecurityGroup
    Export:
      Name: !Sub ${EnvironmentName}-WebServerSecurityGroup

  LoadBalancerURL:
    Description: URL del Load Balancer
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub ${EnvironmentName}-ALBURL

  DatabaseEndpoint:
    Description: Endpoint de la base de datos
    Value: !GetAtt RDSDatabase.Endpoint.Address
    Export:
      Name: !Sub ${EnvironmentName}-DBEndpoint
  BastionHostIP:
    Description: IP pública del Bastion Host
    Value: !GetAtt BastionHost.PublicIp
    Export:
      Name: !Sub ${EnvironmentName}-BastionHostIP